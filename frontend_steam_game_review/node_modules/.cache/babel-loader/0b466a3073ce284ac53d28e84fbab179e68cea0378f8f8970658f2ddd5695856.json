{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosInstance } from \"../../share/request\";\nimport axios from \"axios\"; // axios import 합니다.\n\nconst initialState = {\n  comments: [],\n  comment: {\n    postId: 0,\n    comment: \"\"\n  },\n  disabledToggle: false,\n  isLoading: false,\n  error: null\n};\nconst config = {\n  headers: {\n    Authorization: localStorage.getItem(\"token\")\n  }\n};\nexport const __getComments = createAsyncThunk(\"getComments\", async (payload, thunkAPI) => {\n  //console.log(\"겟 페이로드\", payload);\n  try {\n    /*const data = await axios.get(\n      `http://localhost:3001/comments?postId=${payload}`\n    ); //로컬용*/\n    const data = await axiosInstance.get(`/detail/comment/${payload}`);\n    // console.log(\"리듀서 겟 받기\", data);\n\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    console.log(error);\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __addComment = createAsyncThunk(\"addComment\", async (payload, thunkAPI) => {\n  console.log(\"에드 페이로드\", payload);\n  try {\n    // const data = await axios.post(\"http://localhost:3001/comments\", payload); //로컬용\n    const data = await axiosInstance.post(`/detail/comment/${payload.postId}`, payload, config);\n    // console.log(data);\n    // console.log(\"코멘트 페이로드\", payload);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    console.log(error);\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __deleteComment = createAsyncThunk(\"deleteComment\", async (payload, thunkAPI) => {\n  console.log(\"딜리트 페이로드\", payload);\n  try {\n    // const data = await axios.delete(\n    //   `http://localhost:3001/comments/${payload}`\n    // );\n\n    const data = await axiosInstance.post(`/detail/comment/${payload.postId}/${payload.commentId}`, payload, config);\n    console.log(\"딜리트데이터\", data);\n    return thunkAPI.fulfillWithValue(payload);\n  } catch (error) {\n    const errorObject = error.response.data;\n    if (errorObject.status === 400) {\n      alert(errorObject.message);\n    }\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __updateCommentDetail = createAsyncThunk(\n//업데이트\n\"todos/update_comments\", async (payload, thunkAPI) => {\n  try {\n    const updateComment = payload.updateComment;\n    // await axios.patch(\n    //   `http://localhost:3001/comments/${updateComment.id}`,\n    //   updateComment\n    // );\n    console.log(payload);\n    await axiosInstance.patch(`/detail/comment/${updateComment.postId}/${updateComment.commentId}`, updateComment, config);\n    return thunkAPI.fulfillWithValue(updateComment);\n  } catch (error) {\n    const errorObject = error.response.data;\n    console.log(error.response.data.status);\n    if (errorObject.status === 400) {\n      return alert(errorObject.message);\n    }\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const commentsSlice = createSlice({\n  name: \"comments\",\n  // name: \"comment\",\n  initialState,\n  reducers: {\n    isDisabledToggle: (state, action) => {\n      console.log(action);\n      console.log(state);\n      state.disabledToggle = action.payload;\n    }\n  },\n  extraReducers: {\n    // get 받아오는 리듀서\n    [__getComments.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n\n    [__getComments.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.comments = action.payload;\n      console.log(\"풀필드\", state.comments);\n    },\n    [__getComments.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    // post 보내는 리듀서\n    [__addComment.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.comments.push(action.payload);\n    },\n    [__addComment.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    // delete 리듀서\n    [__deleteComment.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      console.log(state.comments);\n      const target = state.comments.findIndex(comment => comment.id === action.payload);\n      console.log(\"액션페이로드\", action.payload);\n      state.comments.splice(target, 1); // state 변화 생김\n    },\n\n    [__deleteComment.pending]: state => {\n      state.isLoading = true;\n    },\n    [__deleteComment.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    // update 리듀서\n    [__updateCommentDetail.pending]: (state, action) => {\n      state.isLoading = true;\n    },\n    [__updateCommentDetail.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      console.log(action.payload);\n      console.log(state.comments);\n      // state.comments = [...state.comments].map((comment) => {\n      //   if (comment.commentId === action.payload.commentId) {\n      //     const newComment = comment;\n      //     newComment.comment = action.payload.comment;\n      //     return newComment;\n      //   }\n      //   return comment;\n      // });\n      const target = state.comments.findIndex(comment => comment.commentId === action.payload.commentId);\n      console.log(target);\n      state.comments.splice(target, 1, action.payload);\n    },\n    [__updateCommentDetail.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  isDisabledToggle\n} = commentsSlice.actions;\nexport default commentsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axiosInstance","axios","initialState","comments","comment","postId","disabledToggle","isLoading","error","config","headers","Authorization","localStorage","getItem","__getComments","payload","thunkAPI","data","get","fulfillWithValue","console","log","rejectWithValue","__addComment","post","__deleteComment","commentId","errorObject","response","status","alert","message","__updateCommentDetail","updateComment","patch","commentsSlice","name","reducers","isDisabledToggle","state","action","extraReducers","pending","fulfilled","rejected","push","target","findIndex","id","splice","actions","reducer"],"sources":["/Users/choidonghwan/Desktop/frontend_steam_game_review /frontend_steam_game_review/src/reduex/modules/commentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosInstance } from \"../../share/request\";\nimport axios from \"axios\"; // axios import 합니다.\n\nconst initialState = {\n  comments: [],\n  comment: {\n    postId: 0,\n    comment: \"\",\n  },\n  disabledToggle: false,\n  isLoading: false,\n  error: null,\n};\nconst config = {\n  headers: {\n    Authorization: localStorage.getItem(\"token\"),\n  },\n};\nexport const __getComments = createAsyncThunk(\n  \"getComments\",\n  async (payload, thunkAPI) => {\n    //console.log(\"겟 페이로드\", payload);\n    try {\n      /*const data = await axios.get(\n        `http://localhost:3001/comments?postId=${payload}`\n      ); //로컬용*/\n      const data = await axiosInstance.get(`/detail/comment/${payload}`);\n      // console.log(\"리듀서 겟 받기\", data);\n\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\nexport const __addComment = createAsyncThunk(\n  \"addComment\",\n  async (payload, thunkAPI) => {\n    console.log(\"에드 페이로드\", payload);\n    try {\n      // const data = await axios.post(\"http://localhost:3001/comments\", payload); //로컬용\n      const data = await axiosInstance.post(\n        `/detail/comment/${payload.postId}`,\n        payload,\n        config\n      );\n      // console.log(data);\n      // console.log(\"코멘트 페이로드\", payload);\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const __deleteComment = createAsyncThunk(\n  \"deleteComment\",\n  async (payload, thunkAPI) => {\n    console.log(\"딜리트 페이로드\", payload);\n    try {\n      // const data = await axios.delete(\n      //   `http://localhost:3001/comments/${payload}`\n      // );\n\n      const data = await axiosInstance.post(\n        `/detail/comment/${payload.postId}/${payload.commentId}`,\n        payload,\n        config\n      );\n      console.log(\"딜리트데이터\", data);\n      return thunkAPI.fulfillWithValue(payload);\n    } catch (error) {\n      const errorObject = error.response.data;\n      if (errorObject.status === 400) {\n        alert(errorObject.message);\n      }\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\nexport const __updateCommentDetail = createAsyncThunk(\n  //업데이트\n  \"todos/update_comments\",\n  async (payload, thunkAPI) => {\n    try {\n      const updateComment = payload.updateComment;\n      // await axios.patch(\n      //   `http://localhost:3001/comments/${updateComment.id}`,\n      //   updateComment\n      // );\n      console.log(payload);\n      await axiosInstance.patch(\n        `/detail/comment/${updateComment.postId}/${updateComment.commentId}`,\n        updateComment,\n        config\n      );\n      return thunkAPI.fulfillWithValue(updateComment);\n    } catch (error) {\n      const errorObject = error.response.data;\n      console.log(error.response.data.status);\n      if (errorObject.status === 400) {\n        return alert(errorObject.message);\n      }\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const commentsSlice = createSlice({\n  name: \"comments\",\n  // name: \"comment\",\n  initialState,\n  reducers: {\n    isDisabledToggle: (state, action) => {\n      console.log(action);\n      console.log(state);\n      state.disabledToggle = action.payload;\n    },\n  },\n  extraReducers: {\n    // get 받아오는 리듀서\n    [__getComments.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getComments.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.comments = action.payload;\n      console.log(\"풀필드\", state.comments);\n    },\n    [__getComments.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    // post 보내는 리듀서\n    [__addComment.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.comments.push(action.payload);\n    },\n    [__addComment.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    // delete 리듀서\n    [__deleteComment.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      console.log(state.comments);\n      const target = state.comments.findIndex(\n        (comment) => comment.id === action.payload\n      );\n      console.log(\"액션페이로드\", action.payload);\n      state.comments.splice(target, 1); // state 변화 생김\n    },\n    [__deleteComment.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__deleteComment.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    // update 리듀서\n    [__updateCommentDetail.pending]: (state, action) => {\n      state.isLoading = true;\n    },\n    [__updateCommentDetail.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      console.log(action.payload);\n      console.log(state.comments);\n      // state.comments = [...state.comments].map((comment) => {\n      //   if (comment.commentId === action.payload.commentId) {\n      //     const newComment = comment;\n      //     newComment.comment = action.payload.comment;\n      //     return newComment;\n      //   }\n      //   return comment;\n      // });\n      const target = state.comments.findIndex(\n        (comment) => comment.commentId === action.payload.commentId\n      );\n      console.log(target);\n      state.comments.splice(target, 1, action.payload);\n    },\n    [__updateCommentDetail.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\nexport const { isDisabledToggle } = commentsSlice.actions;\nexport default commentsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}