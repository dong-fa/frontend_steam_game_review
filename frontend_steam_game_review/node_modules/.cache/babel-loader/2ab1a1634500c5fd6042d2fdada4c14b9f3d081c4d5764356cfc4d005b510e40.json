{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosInstance } from \"../../share/request\";\nimport axios from \"axios\"; // axios import 합니다.\n\nconst initialState = {\n  games: [],\n  game: {\n    gameImage: \"\",\n    gameName: \"\",\n    gameGenre: \"\"\n  },\n  isLoading: false,\n  error: null\n};\nexport const __getgames = createAsyncThunk(\"getGames\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/games\");\n    console.log(\"리듀서 겟게임\", ...data.data);\n    return thunkAPI.fulfillWithValue(data);\n  } catch (error) {\n    console.log(error);\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __addgame = createAsyncThunk(\"addGame\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.post(\"http://localhost:3001/games\", payload);\n    console.log(data);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    console.log(error);\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n// export const __deleteTodos = createAsyncThunk(\n//   \"deleteTodos\",\n//   async (payload, thunkAPI) => {\n//     try {\n//       const data = await axios.delete(`http://localhost:3001/todos/${payload}`);\n//       console.log(data);\n//       return thunkAPI.fulfillWithValue(data.data);\n//     } catch (error) {\n//       console.log(error);\n//       return thunkAPI.rejectWithValue(error);\n//     }\n//   }\n// );\n\nexport const gameInfoSlice = createSlice({\n  name: \"games\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    // get 받아오는 리듀서\n    [__getgames.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n\n    [__getgames.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.comments = action.payload;\n      console.log(\"풀필드\", state.games);\n    },\n    [__getgames.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    // post 보내는 리듀서\n    [__addgame.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.games.push(action.payload);\n    },\n    [__addgame.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  }\n});\n\nexport default gameInfoSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axiosInstance","axios","initialState","games","game","gameImage","gameName","gameGenre","isLoading","error","__getgames","payload","thunkAPI","data","get","console","log","fulfillWithValue","rejectWithValue","__addgame","post","gameInfoSlice","name","reducers","extraReducers","pending","state","fulfilled","action","comments","rejected","push","reducer"],"sources":["/Users/choidonghwan/Desktop/frontend_steam_game_review/frontend_steam_game_review/src/reduex/modules/gameInfoSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosInstance } from \"../../share/request\";\nimport axios from \"axios\"; // axios import 합니다.\n\nconst initialState = {\n  games: [],\n  game: {\n    gameImage: \"\",\n    gameName: \"\",\n    gameGenre: \"\",\n  },\n  isLoading: false,\n  error: null,\n};\n\nexport const __getgames = createAsyncThunk(\n  \"getGames\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/games\");\n      console.log(\"리듀서 겟게임\", ...data.data);\n      return thunkAPI.fulfillWithValue(data);\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\nexport const __addgame = createAsyncThunk(\n  \"addGame\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.post(\"http://localhost:3001/games\", payload);\n      console.log(data);\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n// export const __deleteTodos = createAsyncThunk(\n//   \"deleteTodos\",\n//   async (payload, thunkAPI) => {\n//     try {\n//       const data = await axios.delete(`http://localhost:3001/todos/${payload}`);\n//       console.log(data);\n//       return thunkAPI.fulfillWithValue(data.data);\n//     } catch (error) {\n//       console.log(error);\n//       return thunkAPI.rejectWithValue(error);\n//     }\n//   }\n// );\n\nexport const gameInfoSlice = createSlice({\n  name: \"games\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    // get 받아오는 리듀서\n    [__getgames.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getgames.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.comments = action.payload;\n      console.log(\"풀필드\", state.games);\n    },\n    [__getgames.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    // post 보내는 리듀서\n    [__addgame.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.games.push(action.payload);\n    },\n    [__addgame.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n});\n\nexport default gameInfoSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}