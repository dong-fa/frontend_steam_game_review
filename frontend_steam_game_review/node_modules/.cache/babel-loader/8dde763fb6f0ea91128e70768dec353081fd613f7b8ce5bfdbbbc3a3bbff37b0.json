{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosInstance } from \"../../share/request\";\nimport axios from \"axios\";\nconst initialState = {\n  gameList: [],\n  isLoading: false,\n  error: null\n};\n\n//DB에서 데이터 받아오기\nexport const __getGameList = createAsyncThunk(\"getTodoList\", async (payload, thunkAPI) => {\n  try {\n    const {\n      data\n    } = await axios.get(\"http://localhost:3001/Post\");\n    console.log(\"메인슬라이스 데이터\", data);\n    return thunkAPI.fulfillWithValue(data);\n  } catch (error) {\n    console.log(error);\n    return thunkAPI.fulfillWithValue(error);\n  }\n});\n\n// //DB에 데이터 추가\n// export const __postTodoList = createAsyncThunk(\n//   \"postTodoList\",\n//   async (payload, thunkAPI) => {\n//     try {\n//       const { data } = await axios.post(\"http://localhost:3001/todos\", payload);\n//       console.log(\"getTodoList \");\n//       return thunkAPI.fulfillWithValue(data);\n//     } catch (error) {\n//       console.log(error);\n//       return thunkAPI.fulfillWithValue(error);\n//     }\n//   }\n// );\n\n// //DB 데이터 삭제\n// export const __deleteTodoList = createAsyncThunk(\n//   \"deleteTodoList\",\n//   async (payload, thunkAPI) => {\n//     try {\n//       console.log(payload);\n//       const { data } = await axios.delete(\n//         `http://localhost:3001/todos/${payload}`\n//       );\n//       console.log(\"deleteTodoList \");\n\n//       return thunkAPI.fulfillWithValue(data);\n//     } catch (error) {\n//       console.log(error);\n//       return thunkAPI.fulfillWithValue(error);\n//     }\n//   }\n// );\n\n//리덕스\nconst mainSlice = createSlice({\n  name: \"mainSlice\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    //get\n    [__getGameList.pending]: state => {\n      state.isLoading = true;\n    },\n    [__getGameList.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.gameList = action.payload;\n    },\n    [__getGameList.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    }\n\n    // //post\n    // [__postTodoList.pending]: (state) => {\n    //   state.isLoading = true;\n    // },\n    // [__postTodoList.fulfilled]: (state, action) => {\n    //   state.isLoading = false;\n    //   state.todos = [...state.todos, action.payload];\n    // },\n    // [__postTodoList.rejected]: (state, action) => {\n    //   state.isLoading = false;\n    //   state.error = action.payload;\n    // },\n\n    // //delete\n    // [__deleteTodoList.pending]: (state) => {\n    //   state.isLoading = true;\n    // },\n    // [__deleteTodoList.fulfilled]: (state, action) => {\n    //   state.isLoading = false;\n    //   state.todos = state.todos.filter((list) => list.id !== action.payload);\n    // },\n    // [__deleteTodoList.rejected]: (state, action) => {\n    //   state.isLoading = false;\n    //   state.error = action.payload;\n    // },\n  }\n});\n\nexport default mainSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axiosInstance","axios","initialState","gameList","isLoading","error","__getGameList","payload","thunkAPI","data","get","console","log","fulfillWithValue","mainSlice","name","reducers","extraReducers","pending","state","fulfilled","action","rejected","reducer"],"sources":["/Users/choidonghwan/Desktop/frontend_steam_game_review/frontend_steam_game_review/src/reduex/modules/mainSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosInstance } from \"../../share/request\";\nimport axios from \"axios\";\n\nconst initialState = {\n  gameList: [],\n  isLoading: false,\n  error: null,\n};\n\n//DB에서 데이터 받아오기\nexport const __getGameList = createAsyncThunk(\n  \"getTodoList\",\n  async (payload, thunkAPI) => {\n    try {\n      const { data } = await axios.get(\"http://localhost:3001/Post\");\n      console.log(\"메인슬라이스 데이터\", data);\n      return thunkAPI.fulfillWithValue(data);\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.fulfillWithValue(error);\n    }\n  }\n);\n\n// //DB에 데이터 추가\n// export const __postTodoList = createAsyncThunk(\n//   \"postTodoList\",\n//   async (payload, thunkAPI) => {\n//     try {\n//       const { data } = await axios.post(\"http://localhost:3001/todos\", payload);\n//       console.log(\"getTodoList \");\n//       return thunkAPI.fulfillWithValue(data);\n//     } catch (error) {\n//       console.log(error);\n//       return thunkAPI.fulfillWithValue(error);\n//     }\n//   }\n// );\n\n// //DB 데이터 삭제\n// export const __deleteTodoList = createAsyncThunk(\n//   \"deleteTodoList\",\n//   async (payload, thunkAPI) => {\n//     try {\n//       console.log(payload);\n//       const { data } = await axios.delete(\n//         `http://localhost:3001/todos/${payload}`\n//       );\n//       console.log(\"deleteTodoList \");\n\n//       return thunkAPI.fulfillWithValue(data);\n//     } catch (error) {\n//       console.log(error);\n//       return thunkAPI.fulfillWithValue(error);\n//     }\n//   }\n// );\n\n//리덕스\nconst mainSlice = createSlice({\n  name: \"mainSlice\",\n  initialState,\n  reducers: {},\n\n  extraReducers: {\n    //get\n    [__getGameList.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__getGameList.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.gameList = action.payload;\n    },\n    [__getGameList.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    // //post\n    // [__postTodoList.pending]: (state) => {\n    //   state.isLoading = true;\n    // },\n    // [__postTodoList.fulfilled]: (state, action) => {\n    //   state.isLoading = false;\n    //   state.todos = [...state.todos, action.payload];\n    // },\n    // [__postTodoList.rejected]: (state, action) => {\n    //   state.isLoading = false;\n    //   state.error = action.payload;\n    // },\n\n    // //delete\n    // [__deleteTodoList.pending]: (state) => {\n    //   state.isLoading = true;\n    // },\n    // [__deleteTodoList.fulfilled]: (state, action) => {\n    //   state.isLoading = false;\n    //   state.todos = state.todos.filter((list) => list.id !== action.payload);\n    // },\n    // [__deleteTodoList.rejected]: (state, action) => {\n    //   state.isLoading = false;\n    //   state.error = action.payload;\n    // },\n  },\n});\n\nexport default mainSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,aAAa,QAAQ,qBAAqB;AACnD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGP,gBAAgB,CAC3C,aAAa,EACb,OAAOQ,OAAO,EAAEC,QAAQ,KAAK;EAC3B,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,4BAA4B,CAAC;IAC9DC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,IAAI,CAAC;IAC/B,OAAOD,QAAQ,CAACK,gBAAgB,CAACJ,IAAI,CAAC;EACxC,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdM,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;IAClB,OAAOG,QAAQ,CAACK,gBAAgB,CAACR,KAAK,CAAC;EACzC;AACF,CAAC,CACF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMS,SAAS,GAAGhB,WAAW,CAAC;EAC5BiB,IAAI,EAAE,WAAW;EACjBb,YAAY;EACZc,QAAQ,EAAE,CAAC,CAAC;EAEZC,aAAa,EAAE;IACb;IACA,CAACX,aAAa,CAACY,OAAO,GAAIC,KAAK,IAAK;MAClCA,KAAK,CAACf,SAAS,GAAG,IAAI;IACxB,CAAC;IACD,CAACE,aAAa,CAACc,SAAS,GAAG,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC5CF,KAAK,CAACf,SAAS,GAAG,KAAK;MACvBe,KAAK,CAAChB,QAAQ,GAAGkB,MAAM,CAACd,OAAO;IACjC,CAAC;IACD,CAACD,aAAa,CAACgB,QAAQ,GAAG,CAACH,KAAK,EAAEE,MAAM,KAAK;MAC3CF,KAAK,CAACf,SAAS,GAAG,KAAK;MACvBe,KAAK,CAACd,KAAK,GAAGgB,MAAM,CAACd,OAAO;IAC9B;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;AACF,CAAC,CAAC;;AAEF,eAAeO,SAAS,CAACS,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}