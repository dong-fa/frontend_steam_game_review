{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosInstance } from \"../../share/request\";\nimport jwtdecode from \"jwt-decode\";\nimport axios from \"axios\";\nconst initialState = {\n  userInfo: [{\n    userid: \"\",\n    password: \"\",\n    email: \"\"\n  }],\n  error: null,\n  isLoading: false,\n  loginCheck: false\n};\n\n//로그인\nexport const __postLogin = createAsyncThunk(\"login\", async (_ref, thunkAPI) => {\n  let {\n    user,\n    navigate\n  } = _ref;\n  try {\n    const data = await axiosInstance.post(`/api/auth/login`, user);\n\n    //토큰을 로컬에 저장\n    const token = data.headers.get(\"Authorization\");\n    localStorage.setItem(\"token\", token);\n    console.log(localStorage.getItem(\"token\"));\n\n    //로그인 성공시\n    if (data.data.statuscode === 200) {\n      const userId = jwtdecode(token);\n      alert(`${userId.sub}님 환영합니다`);\n    }\n    navigate(\"/\");\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    console.log(error);\n    console.log(error.response.data);\n    const errorObject = error.response.data;\n\n    //에러코드 처리\n    if (errorObject.status === 400) {\n      alert(`${errorObject.message}`);\n    }\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//회원가입\nexport const __signUp = createAsyncThunk(\"signUp\", async (payload, thunkAPI) => {\n  try {\n    //`/api/auth/signup`\n    // const data = await axiosInstance.post(`/api/auth/signup`, payload); // 원래 경로\n    const data = await axiosInstance.post(`http://3.38.107.133/api/auth/signup`, payload);\n    console.log(data);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    //에러\n    console.log(error);\n    alert(`${error.response.data.errorMessage}`);\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __idCheck = createAsyncThunk(\"idCheck\", async (payload, thunkAPI) => {\n  console.log(\"아이디 체크\", payload);\n  try {\n    const data = await axios.get(`http://3.38.107.133/api/auth/userId\n      `, payload);\n    console.log(data);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    //에러 메세지\n    console.log(error);\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//리덕스\nexport const loginSignUp = createSlice({\n  name: \"loginSignUp\",\n  initialState,\n  reducers: {\n    logOut: (state, payload) => {\n      state.loginCheck = false;\n    }\n  },\n  extraReducers: {\n    //로그인\n    [__postLogin.pending]: state => {\n      state.isLoading = true;\n    },\n    [__postLogin.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.loginCheck = true;\n      //sessionStorage.setItem(\"userinfo\", JSON.stringify(action.payload));\n    },\n\n    [__postLogin.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    //회원가입\n    [__signUp.pending]: state => {\n      state.isLoading = true;\n    },\n    [__signUp.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.signUp.push(action.payload);\n    },\n    [__signUp.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    //아이디중복확인\n    [__idCheck.pending]: state => {\n      state.isLoading = true;\n    },\n    [__idCheck.fulfilled]: (state, action) => {\n      alert();\n      state.isLoading = false;\n      state.signup.push(action.payload);\n    },\n    [__idCheck.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n      console.log(action.payload);\n    }\n  }\n});\nexport const {\n  logOut\n} = loginSignUp.actions;\nexport default loginSignUp.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axiosInstance","jwtdecode","axios","initialState","userInfo","userid","password","email","error","isLoading","loginCheck","__postLogin","thunkAPI","user","navigate","data","post","token","headers","get","localStorage","setItem","console","log","getItem","statuscode","userId","alert","sub","fulfillWithValue","response","errorObject","status","message","rejectWithValue","__signUp","payload","errorMessage","__idCheck","loginSignUp","name","reducers","logOut","state","extraReducers","pending","fulfilled","action","rejected","signUp","push","signup","actions","reducer"],"sources":["/Users/choidonghwan/Desktop/frontend_steam_game_review /frontend_steam_game_review/src/reduex/modules/loginSignUp.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axiosInstance } from \"../../share/request\";\nimport jwtdecode from \"jwt-decode\";\nimport axios from \"axios\";\n\nconst initialState = {\n  userInfo: [\n    {\n      userid: \"\",\n      password: \"\",\n      email: \"\",\n    },\n  ],\n  error: null,\n  isLoading: false,\n  loginCheck: false,\n};\n\n//로그인\nexport const __postLogin = createAsyncThunk(\n  \"login\",\n  async ({ user, navigate }, thunkAPI) => {\n    try {\n      const data = await axiosInstance.post(`/api/auth/login`, user);\n\n      //토큰을 로컬에 저장\n      const token = data.headers.get(\"Authorization\");\n      localStorage.setItem(\"token\", token);\n      console.log(localStorage.getItem(\"token\"));\n\n      //로그인 성공시\n      if (data.data.statuscode === 200) {\n        const userId = jwtdecode(token);\n        alert(`${userId.sub}님 환영합니다`);\n      }\n      navigate(\"/\");\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      console.log(error);\n      console.log(error.response.data);\n      const errorObject = error.response.data;\n\n      //에러코드 처리\n      if (errorObject.status === 400) {\n        alert(`${errorObject.message}`);\n      }\n\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//회원가입\nexport const __signUp = createAsyncThunk(\n  \"signUp\",\n  async (payload, thunkAPI) => {\n    try {\n      //`/api/auth/signup`\n      // const data = await axiosInstance.post(`/api/auth/signup`, payload); // 원래 경로\n      const data = await axiosInstance.post(\n        `http://3.38.107.133/api/auth/signup`,\n        payload\n      );\n      console.log(data);\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      //에러\n      console.log(error);\n      alert(`${error.response.data.errorMessage}`);\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const __idCheck = createAsyncThunk(\n  \"idCheck\",\n  async (payload, thunkAPI) => {\n    console.log(\"아이디 체크\", payload);\n    try {\n      const data = await axios.get(\n        `http://3.38.107.133/api/auth/userId\n      `,\n        payload\n      );\n      console.log(data);\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      //에러 메세지\n      console.log(error);\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//리덕스\nexport const loginSignUp = createSlice({\n  name: \"loginSignUp\",\n  initialState,\n  reducers: {\n    logOut: (state, payload) => {\n      state.loginCheck = false;\n    },\n  },\n  extraReducers: {\n    //로그인\n    [__postLogin.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__postLogin.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.loginCheck = true;\n      //sessionStorage.setItem(\"userinfo\", JSON.stringify(action.payload));\n    },\n    [__postLogin.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    //회원가입\n    [__signUp.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__signUp.fulfilled]: (state, action) => {\n      state.isLoading = false;\n      state.signUp.push(action.payload);\n    },\n    [__signUp.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    //아이디중복확인\n    [__idCheck.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [__idCheck.fulfilled]: (state, action) => {\n      alert();\n      state.isLoading = false;\n      state.signup.push(action.payload);\n    },\n    [__idCheck.rejected]: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n      console.log(action.payload);\n    },\n  },\n});\nexport const { logOut } = loginSignUp.actions;\nexport default loginSignUp.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}